name: Dev - Deploy challenge app

on:
  push:
    branches:
      - ayo/interview

# Ensure this wont run more than one in parallel
concurrency: deploy_challenge_app_dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      ########## Set up environment
      - name: Setup base node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      ##########
      ########## AWS Login
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      ##########
      ########## Build and push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev_app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      ##########
      ########## Deploy
      - name: Download taskdef json
        run: |
          aws ecs describe-task-definition --task-definition dev-app --query taskDefinition > task-definition.json
      # This step can be used to have a unique docker tag per release
      - name: Update taskdef
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: dev
          service: dev-app
          force-new-deployment: true
          wait-for-service-stability: true
      ##########
